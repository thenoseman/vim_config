snippet warn
	puts "\033[33m===== #{File.basename(__FILE__)}:#{__LINE__} ====="
	puts ${1} 
	puts "===============================\033[0m" 
# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
	# encoding: utf-8
snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet def
	def ${1:method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet cla class .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${3}
		end
	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module_function

		${2}
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
# def self
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet sorb
	sort_by { |${1:e}| ${2} }
snippet lam
	lambda { |${1:args}| ${2} }
snippet dov
	do |${1:variable}|
		${2}
	end
snippet pry
	require 'pry'; binding.pry

#############################################
# Rails snippets - for pure Ruby, see above #
#############################################
snippet flash
	flash[:${1:notice}] = "${2}"
snippet habtm
	has_and_belongs_to_many :${1:object}, :join_table => "${2:table_name}", :foreign_key => "${3}_id"${4}
snippet hm
	has_many :${1:object}
snippet hmd
	has_many :${1:other}s, :class_name => "${2:$1}", :foreign_key => "${3:$1}_id", :dependent => :destroy${4}
snippet hmt
	has_many :${1:object}, :through => :${2:object}
snippet ho
	has_one :${1:object}
snippet i18
	I18n.t('${1:type.key}')${2}
snippet ist
	<%= image_submit_tag("${1:agree.png}", :id => "${2:id}"${3} %>
snippet log
	Rails.logger.${1:debug} ${2}
snippet logd
	logger.debug { "${1:message}" }${2}
#rspec
snippet it
	it "${1:spec_name}" do
		${2}
	end
snippet itp
	it "${1:spec_name}"
	${2}
snippet desc
	describe ${1:class_name} do
		${2}
	end
snippet cont
	context "${1:message}" do
		${2}
	end
snippet bef
	before :${1:each} do
		${2}
	end
snippet aft
	after :${1:each} do
		${2}
	end
