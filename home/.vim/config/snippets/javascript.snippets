# jasmine
snippet it "it"
it("${1}", sinon.test(function() {
  ${2}
}));
endsnippet

snippet desc "desc"
describe("${1}", function() {
  ${2}
});
endsnippet

snippet bef "bef"
beforeEach(function() {
  ${1}
});
endsnippet

# jQuery
snippet domr "domr"
$(function() {
  ${1}
});
endsnippet

# Function
snippet fun "fun"
function ${1:functionName}(${2:argument}) {
  ${3}
}
endsnippet

snippet fu "function() {}" w
function (${1}) { 
  ${2} 
}
endsnippet

snippet f "function() {}" w
function () { 
  ${2} 
}
endsnippet

snippet d "debugger;" w
debugger;
endsnippet

snippet us "use strict"
'use strict';
endsnippet

# Node require
snippet r "r"
var ${1:} = require('$1');
endsnippet

# Immediatlely Invoked Functional Expression IIFE (use in blank .js file)
snippet c "c"
(function `!v substitute(Filename(), '\([_-]\([a-z]\)\)', "\\U\\2", "g")`Scope() {
	'use strict';
	${1}
})();
endsnippet

# if
snippet if "if"
if (${1:true}) {
	${2}
}
endsnippet

# if ... else
snippet ife "ife"
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

# console.log
snippet cl "cl"
console.log(${1});
endsnippet

#
# Backbone
# 
snippet bv "bv"
var ${1:MyView} = Backbone.View.extend({
  ${2:el: ''},
  ${3:tagName: ''},
  ${4:className: ''},
  template: $("${5: '#'}").html(),
  initialize: function () {
    ${6:}
  },
  events: {
    ${7:}
  },
  render: function () {
	var tmpl = _.template(this.template);
	${8}
	this.$el.html(tmpl(this.model.toJSON()));
	return this;
  }
});
endsnippet

snippet br "br"
var ${1:Router} = Backbone.Router.extend({
  routes: {
    ${2:}
  },
  initialize: function() {
    ${4:}
  },
  ${5:method:foo}: function(${6:}) {
    ${7:}
  }
});
endsnippet

snippet bm "bm"
var ${1:Model} = Backbone.Model.extend({
  defaults: {
  },
  initialize: function () {
    ${2}
  }
});
endsnippet

snippet bc "bc"
var ${2:$1}s = Backbone.Collection.extend({
  model: ${3:$1},
  url: "${4}"
});
endsnippet


