snippet concern "ActiveSupport::Concern class" b
module ${1:`!v substitute(expand("%:t:r"), '\(_\|^\)\(.\)', '\u\2', 'g')`}
  extend ActiveSupport::Concern

  included do
    ${1:# singleton method calls go here ('scope :foo, :conditions => { :created_at => nil }')}
  end

  module ClassMethods
    ${2:# singleton method definitions go here ('def called_on_self; ...; end')}
  end

  ${3:# instance method definitions go here ('def instance_method; ...; end')}
end
endsnippet

snippet . "inspect" w
.inspect
endsnippet

snippet warn "warn"
puts "\033[33m===== #{File.basename(__FILE__)}:#{__LINE__} ====="
puts ${1} 
puts "===============================\033[0m" 
endsnippet

snippet #! "#!"
#!/usr/bin/env ruby
# encoding: utf-8
endsnippet

snippet cla "class .. end"
class ${1:`!v substitute(expand("%:t:r"), '\(_\|^\)\(.\)', '\u\2', 'g')`}
  ${2}
end
endsnippet

snippet cla "class .. initialize .. end"
class ${1:`!v substitute(expand("%:t:r"), '\(_\|^\)\(.\)', '\u\2', 'g')`}
  def initialize(${2:args})
    ${3}
  end
end
endsnippet

snippet mod "module .. end"
module ${1:`!v substitute(expand("%:t:r"), '\(_\|^\)\(.\)', '\u\2', 'g')`}
  ${2}
end
endsnippet

# attr_reader
snippet r "r"
attr_reader :${1:attr_names}
endsnippet

# attr_writer
snippet w "w"
attr_writer :${1:attr_names}
endsnippet

# attr_accessor
snippet rw "rw"
attr_accessor :${1:attr_names}
endsnippet

snippet def "def"
def ${1:method_name}
  ${2}
end
endsnippet

# def self
snippet defs "defs"
def self.${1:class_method_name}
  ${2}
end
endsnippet

# pry
snippet pry "debug with pry"
puts "\033[33m= PRY (#{File.basename(__FILE__)}:#{__LINE__}) =\033[0m"; require "pry"; binding.pry
endsnippet

#initialize
snippet init "def initialize ... end"
def initialize(${1:opts})
	${2}
end
endsnippet

# HEREDOC
snippet doc "heredoc block"
<<~HEREDOC
	${1}
HEREDOC
endsnippet

snippet save "save_and_open_screenshot"
save_and_open_screenshot
endsnippet
