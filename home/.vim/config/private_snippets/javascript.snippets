#
# Mocha + Chai + Sinon
#
snippet it "it() {}"
it("${1}", () => {
	${2}
});
endsnippet

snippet desc "describe() {}"
describe("${1}", () => {
  ${2}
});
endsnippet

snippet bef "beforeEach"
beforeEach(() => {
  ${1}
});
endsnippet

snippet befa "before"
before(() => {
  ${1}
});
endsnippet

snippet exp "expect"
expect(${1}).to${2}
endsnippet

snippet d "debugger"
debugger;
endsnippet

snippet const "constructor() {}"
constructor(${1}) {
	${2}
}
endsnippet

snippet spy "spyOn"
const spy = jest.spyOn(${1:this}, "${2}");
endsnippet


snippet state "store set"
wrapper.vm.\$store.state.${1:base}.${2} = ${3};
endsnippet

#
# ESLINT
#

snippet esl0 "eslint OFF"
/*eslint-disable ${1}*/
endsnippet

snippet esl1 "eslint ON"
/*eslint-enable ${1}*/
endsnippet

snippet es01 "eslint OFF-ON"
/*eslint-disable $1*/
${0:${VISUAL}}
/*eslint-enable $1*/
endsnippet

snippet esn "eslint next line"
// eslint-disable-next-line ${1}
endsnippet

snippet esl "eslint line"
// eslint-disable-line ${1}
endsnippet

#
# JAVSCRIPT
#

snippet exit. "process.exit"
process.exit(0);
endsnippet

# console.log
snippet cl "console.log"
console.log(${1});
endsnippet

# console.error
snippet ce "console.error"
console.error(${1});
endsnippet

# console.info
snippet ci "console.info"
console.info(${1});
endsnippet

snippet undef "if(undef) {}"
if(typeof ${1} === "undefined") {
	${2}
}
endsnippet

snippet qs "document.querySelector"
document.querySelector("${1}");
endsnippet

snippet qsa "document.querySelectorAll"
document.querySelectorAll("${1}");
endsnippet

snippet todo "// TODO"
// TODO: ${1} (FS, `date +"%d.%m.%Y"`)
endsnippet

snippet add ".addEventListener" w
addEventListener("${1:click}", function(evt) {
  ${2}
});
endsnippet

snippet im "import { } ..."
import { ${1} } from "${2}";
endsnippet

snippet imp "import ..."
import ${1} from "${2}";
endsnippet

snippet "= (" "arrow function" ie
= (${1:}) => {
  ${0}
}
endsnippet

snippet "(" "arrow function complete" ie
(${1:}) => { ${0} }
endsnippet

#
# VUE
#
snippet nt "nexttick"
await ${1:wrapper}.vm.\$nextTick();
endsnippet

#
# JEST
#
context "re.search('toH$', snip.buffer[snip.line])"
snippet H ".toHaveBeenCalledWith()" ie
HaveBeenCalled${1:With}(${0});
endsnippet

context "re.search('toE$', snip.buffer[snip.line])"
snippet E ".toEqual()" ie
Equal(${1});
endsnippet

#
# Prettier
#
snippet pr0 "prettier-ignore"
// prettier-ignore
endsnippet

snippet stderr ""
process.stderr.write(JSON.stringify(${1}));
endsnippet

